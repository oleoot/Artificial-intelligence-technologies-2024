from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
import asyncio
import random
import sqlite3
import logging

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# Token –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏ –¥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
TOKEN = '7923883606:AAH9We_31SgEgKfavvbyJ9CgO6gYYt8u1a0'
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è SQLite
conn = sqlite3.connect('PR3/repair_orders.db', check_same_thread=False)
cursor = conn.cursor()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö, —è–∫—â–æ —Ç–∞–∫–æ—ó —â–µ –Ω–µ–º–∞—î
cursor.execute('''
CREATE TABLE IF NOT EXISTS orders (
    order_id TEXT PRIMARY KEY,
    name TEXT,
    phone TEXT,
    phone_model TEXT,
    problem_description TEXT,
    status TEXT
)
''')
conn.commit()

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
user_context = {}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
def add_order(order_id, name, phone, phone_model, problem_description, status):
    cursor.execute('''
    INSERT INTO orders (order_id, name, phone, phone_model, problem_description, status)
    VALUES (?, ?, ?, ?, ?, ?)
    ''', (order_id, name, phone, phone_model, problem_description, status))
    conn.commit()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
def get_order_status(order_id):
    cursor.execute('SELECT * FROM orders WHERE order_id = ?', (order_id,))
    return cursor.fetchone()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
async def start(message: types.Message):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å–ª—É–≥"), types.KeyboardButton(text="–ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–º–æ–Ω—Ç")],
            [types.KeyboardButton(text="–°—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç—É"), types.KeyboardButton(text="–ü—Ä–æ –Ω–∞—Å")],
            [types.KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è")]
        ],
        resize_keyboard=True
    )
    welcome_text = (
        "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É –Ω–∞—à—ñ–π –º–∞–π—Å—Ç–µ—Ä–Ω—ñ –∑ —Ä–µ–º–æ–Ω—Ç—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤! üì±\n\n"
        "–ú–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ—Å—è –Ω–∞ —à–≤–∏–¥–∫–æ–º—É —Ç–∞ —è–∫—ñ—Å–Ω–æ–º—É —Ä–µ–º–æ–Ω—Ç—ñ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —Ä—ñ–∑–Ω–∏—Ö –±—Ä–µ–Ω–¥—ñ–≤ —ñ –º–æ–¥–µ–ª–µ–π."
        "\n\nüíº –ß–æ–º—É –æ–±–∏—Ä–∞—é—Ç—å –Ω–∞—Å?\n"
        "- –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n"
        "- –ì–∞—Ä–∞–Ω—Ç—ñ—è –Ω–∞ –≤—Å—ñ –≤–∏–¥–∏ —Ä–æ–±—ñ—Ç\n"
        "- –ü—Ä–æ–∑–æ—Ä–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥\n"
        "- –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥\n"
        "\n–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ. üòä"
    )
    await message.answer(welcome_text, reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_text(message: types.Message):
    if message.text == "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å–ª—É–≥":
        await get_categories(message)
    elif message.text == "–ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–º–æ–Ω—Ç":
        await request_user_info(message)
    elif message.text == "–°—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç—É":
        await get_status(message)
    elif message.text == "–ü—Ä–æ –Ω–∞—Å":
        await get_about(message)
    elif message.text == "–ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è":
        await get_contacts(message)
    elif message.text == "–ù–∞–∑–∞–¥":
        await main_menu(message)

# –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu(message):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å–ª—É–≥"), types.KeyboardButton(text="–ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–º–æ–Ω—Ç")],
            [types.KeyboardButton(text="–°—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç—É"), types.KeyboardButton(text="–ü—Ä–æ –Ω–∞—Å")],
            [types.KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=markup)

# –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å–ª—É–≥
async def get_categories(message):
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data='diagnostics')],
            [InlineKeyboardButton(text="–ó–∞–º—ñ–Ω–∞ –µ–∫—Ä–∞–Ω–∞", callback_data='screen_replacement')],
            [InlineKeyboardButton(text="–ó–∞–º—ñ–Ω–∞ –±–∞—Ç–∞—Ä–µ—ó", callback_data='battery_replacement')],
            [InlineKeyboardButton(text="–†–µ–º–æ–Ω—Ç —Ä–æ–∑'—î–º—É –∑–∞—Ä—è–¥–∫–∏", callback_data='charging_port_repair')],
            [InlineKeyboardButton(text="–Ü–Ω—à–∞ –ø–æ–ª–æ–º–∫–∞", callback_data='other_issue')]
        ]
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–æ—Å–ª—É–≥:", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
async def callback_handler(call: types.CallbackQuery):
    if call.data in ['diagnostics', 'screen_replacement', 'battery_replacement', 'charging_port_repair', 'other_issue']:
        await category_info(call)
    elif call.data.startswith('register_'):
        await request_user_info(call.message, call.data)

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ –≤–∏–±—Ä–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
async def category_info(call):
    descriptions = {
        'diagnostics': "üîç **–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞**\n\n–î–æ–∑–≤–æ–ª—è—î —Ç–æ—á–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –Ω–µ—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—ñ.",
        'screen_replacement': "üì± **–ó–∞–º—ñ–Ω–∞ –µ–∫—Ä–∞–Ω–∞**\n\n–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: 1-3 –≥–æ–¥–∏–Ω–∏.",
        'battery_replacement': "üîã **–ó–∞–º—ñ–Ω–∞ –±–∞—Ç–∞—Ä–µ—ó**\n\n–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: –¥–æ 1 –≥–æ–¥–∏–Ω–∏.",
        'charging_port_repair': "üîå **–†–µ–º–æ–Ω—Ç —Ä–æ–∑'—î–º—É –∑–∞—Ä—è–¥–∫–∏**\n\n–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ –ø—Ä–∏—Å—Ç—Ä–æ—é.",
        'other_issue': "üìû **–Ü–Ω—à–∞ –ø–æ–ª–æ–º–∫–∞**\n\n–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É."
    }
    description = descriptions.get(call.data, "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
    markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è", callback_data=f'register_{call.data}')]]
    )
    await call.message.answer(description, parse_mode="Markdown", reply_markup=markup)

# –ó–∞–ø–∏—Ç –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–∞–ø–∏—Å—É
async def request_user_info(message, category=None):
    user_context[message.chat.id] = {"action": "register"}
    if category:
        user_context[message.chat.id]["category"] = category.replace('register_', '').replace('_', ' ').capitalize()
    markup = ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n–í–∞—à–µ —ñ–º'—è, –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –ú–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω—É",
        reply_markup=markup
    )
# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def process_message(message: types.Message):
    context = user_context.get(message.chat.id, {})
    action = context.get("action")

    if action == "register":
        await process_user_info(message)
    elif action == "check_status":
        await process_order_status(message)
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é.")

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def process_user_info(message: types.Message):
    try:
        user_data = message.text.split(",")
        name = user_data[0].strip()
        phone = user_data[1].strip()
        phone_model = user_data[2].strip()
        context = user_context.get(message.chat.id, {})
        problem_description = context.get("category", "")
        order_id = str(random.randint(10000, 99999))
        status = "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ."

        add_order(order_id, name, phone, phone_model, problem_description, status)
        await message.answer(f"–î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_id}")
        await main_menu(message)
    except Exception as e:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–º'—è, –¢–µ–ª–µ—Ñ–æ–Ω, –ú–æ–¥–µ–ª—å")

# –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async def get_status(message):
    user_context[message.chat.id] = {"action": "check_status"}
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async def process_order_status(message: types.Message):
    order_id = message.text.strip()
    order_info = get_order_status(order_id)
    if order_info:
        response = (
            f"–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_info[0]}\n"
            f"–Ü–º'—è: {order_info[1]}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {order_info[2]}\n"
            f"–ú–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω—É: {order_info[3]}\n"
            f"–û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏: {order_info[4]}\n"
            f"–°—Ç–∞—Ç—É—Å: {order_info[5]}"
        )
    else:
        response = "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–æ–º–µ—Ä —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
    await message.answer(response)
    await main_menu(message)

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞–π—Å—Ç–µ—Ä–Ω—é
async def get_about(message):
    markup = ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer(
        "–ú–∏ - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –º–∞–π—Å—Ç–µ—Ä–Ω—è –∑ —Ä–µ–º–æ–Ω—Ç—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –∑ –±–∞–≥–∞—Ç–æ—Ä—ñ—á–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º —Ä–æ–±–æ—Ç–∏. "
        "–ü—Ä–æ–ø–æ–Ω—É—î–º–æ —à–≤–∏–¥–∫–∏–π —Ç–∞ —è–∫—ñ—Å–Ω–∏–π —Ä–µ–º–æ–Ω—Ç —Ä—ñ–∑–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤. "
        "–ù–∞—à–∞ –º–µ—Ç–∞ - –∑—Ä–æ–±–∏—Ç–∏ –≤–∞—à –ø—Ä–∏—Å—Ç—Ä—ñ–π –∑–Ω–æ–≤—É —è–∫ –Ω–æ–≤–∏–π!",
        reply_markup=markup
    )

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏
async def get_contacts(message):
    markup = ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer(
        "–ê–¥—Ä–µ—Å–∞: –ø—Ä–æ—Å–ø–µ–∫—Ç –°—Ç–µ–ø–∞–Ω–∞ –ë–∞–Ω–¥–µ—Ä–∏, 4, –ö–∏—ó–≤.\n"
        "–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏: –ü–Ω-–ü—Ç –∑ 9:00 –¥–æ 18:00.\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –¥–æ–≤—ñ–¥–æ–∫: +380123456789",
        reply_markup=markup
    )


# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
dp.message.register(start, F.text == "/start")
dp.message.register(handle_text, F.text.in_(["–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å–ª—É–≥", "–ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–º–æ–Ω—Ç", "–°—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç—É", "–ü—Ä–æ –Ω–∞—Å", "–ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è", "–ù–∞–∑–∞–¥"]))
# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
dp.message.register(process_message)
dp.callback_query.register(callback_handler)

# –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
