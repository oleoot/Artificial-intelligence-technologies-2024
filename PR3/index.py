from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import F
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import asyncio
import random
import sqlite3

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
TOKEN = '7923883606:AAH9We_31SgEgKfavvbyJ9CgO6gYYt8u1a0'
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è SQLite
conn = sqlite3.connect('repair_orders.db', check_same_thread=False)
cursor = conn.cursor()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
cursor.execute('''
CREATE TABLE IF NOT EXISTS orders (
    order_id TEXT PRIMARY KEY,
    name TEXT,
    phone TEXT,
    phone_model TEXT,
    problem_description TEXT,
    status TEXT
)
''')
conn.commit()

# –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
def add_order(order_id, name, phone, phone_model, problem_description, status):
    cursor.execute('''
    INSERT INTO orders (order_id, name, phone, phone_model, problem_description, status)
    VALUES (?, ?, ?, ?, ?, ?)
    ''', (order_id, name, phone, phone_model, problem_description, status))
    conn.commit()

def get_order_status(order_id):
    cursor.execute('SELECT * FROM orders WHERE order_id = ?', (order_id,))
    return cursor.fetchone()

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def main_menu():
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å–ª—É–≥")
    builder.button(text="–ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–º–æ–Ω—Ç")
    builder.button(text="–°—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç—É")
    builder.button(text="–ü—Ä–æ –Ω–∞—Å")
    builder.button(text="–ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è")
    return builder.as_markup(resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    menu = await main_menu()
    photo = types.FSInputFile("PR1/photos/1.jpg")
    welcome_text = (
        "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É –Ω–∞—à—ñ–π –º–∞–π—Å—Ç–µ—Ä–Ω—ñ –∑ —Ä–µ–º–æ–Ω—Ç—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤! üì±\n\n"
        "–ú–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ—Å—è –Ω–∞ —à–≤–∏–¥–∫–æ–º—É —Ç–∞ —è–∫—ñ—Å–Ω–æ–º—É —Ä–µ–º–æ–Ω—Ç—ñ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —Ä—ñ–∑–Ω–∏—Ö –±—Ä–µ–Ω–¥—ñ–≤ —ñ –º–æ–¥–µ–ª–µ–π. "
        "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏—Ö –º–∞–π—Å—Ç—Ä—ñ–≤, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —Å—É—á–∞—Å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —Ç–∞ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω—ñ –∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏. "
        "–ú–∏ —Ä–æ–∑—É–º—ñ—î–º–æ, –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –≤–∞–∂–ª–∏–≤–∏–π –≤–∞—à –ø—Ä–∏—Å—Ç—Ä—ñ–π, —Ç–æ–º—É –¥–æ–∫–ª–∞–¥–∞—î–º–æ –≤—Å—ñ—Ö –∑—É—Å–∏–ª—å –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —ñ –Ω–∞–¥—ñ–π–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –π–æ–≥–æ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ.\n\n"
        "üíº –ß–æ–º—É –æ–±–∏—Ä–∞—é—Ç—å –Ω–∞—Å?\n"
        "- –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–æ—á–Ω–æ—ó –ø—Ä–∏—á–∏–Ω–∏ –ø–æ–ª–æ–º–∫–∏\n"
        "- –ì–∞—Ä–∞–Ω—Ç—ñ—è –Ω–∞ –≤—Å—ñ –≤–∏–¥–∏ —Ä–µ–º–æ–Ω—Ç–Ω–∏—Ö —Ä–æ–±—ñ—Ç\n"
        "- –ü—Ä–æ–∑–æ—Ä–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥ –±–µ–∑ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤\n"
        "- –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞\n\n"
        "–î–ª—è –ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ, —ñ –º–∏ –¥–æ–ø–æ–º–æ–∂–µ–º–æ –≤–∞–º –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤–∞—à –ø—Ä–∏—Å—Ç—Ä—ñ–π –¥–æ –∂–∏—Ç—Ç—è! üòä"
    )
    await message.answer_photo(photo=photo, caption=welcome_text, reply_markup=menu)

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message(F("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å–ª—É–≥"))
async def handle_categories(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="diagnostics")],
        [InlineKeyboardButton(text="–ó–∞–º—ñ–Ω–∞ –µ–∫—Ä–∞–Ω–∞", callback_data="screen_replacement")],
        [InlineKeyboardButton(text="–ó–∞–º—ñ–Ω–∞ –±–∞—Ç–∞—Ä–µ—ó", callback_data="battery_replacement")],
        [InlineKeyboardButton(text="–†–µ–º–æ–Ω—Ç —Ä–æ–∑'—î–º—É –∑–∞—Ä—è–¥–∫–∏", callback_data="charging_port_repair")],
        [InlineKeyboardButton(text="–Ü–Ω—à–∞ –ø–æ–ª–æ–º–∫–∞", callback_data="other_issue")]
    ])
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–æ—Å–ª—É–≥:", reply_markup=keyboard)

@dp.message(F("–ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–º–æ–Ω—Ç"))
async def handle_book_repair(message: types.Message):
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∑–∞–ø–∏—Å—É:\n- –í–∞—à–µ —ñ–º'—è\n- –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n- –ú–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω—É\n- –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏"
    )

@dp.message(F("–°—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç—É"))
async def handle_status(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É.")

@dp.message(F("–ü—Ä–æ –Ω–∞—Å"))
async def handle_about(message: types.Message):
    photo = types.FSInputFile("PR1/photos/2.png")
    await message.answer_photo(
        photo=photo,
        caption=(
            "–ú–∏ - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –º–∞–π—Å—Ç–µ—Ä–Ω—è –∑ —Ä–µ–º–æ–Ω—Ç—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –∑ –±–∞–≥–∞—Ç–æ—Ä—ñ—á–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º —Ä–æ–±–æ—Ç–∏. "
            "–ü—Ä–æ–ø–æ–Ω—É—î–º–æ —à–≤–∏–¥–∫–∏–π —Ç–∞ —è–∫—ñ—Å–Ω–∏–π —Ä–µ–º–æ–Ω—Ç —Ä—ñ–∑–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤. "
            "–ù–∞—à–∞ –º–µ—Ç–∞ - –∑—Ä–æ–±–∏—Ç–∏ –≤–∞—à –ø—Ä–∏—Å—Ç—Ä—ñ–π –∑–Ω–æ–≤—É —è–∫ –Ω–æ–≤–∏–π!"
        )
    )

@dp.message(F("–ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è"))
async def handle_contacts(message: types.Message):
    await message.answer(
        "–ù–∞—à–∞ –º–∞–π—Å—Ç–µ—Ä–Ω—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∑–∞ –∞–¥—Ä–µ—Å–æ—é: –ø—Ä–æ—Å–ø–µ–∫—Ç –°—Ç–µ–ø–∞–Ω–∞ –ë–∞–Ω–¥–µ—Ä–∏, 4, –ö–∏—ó–≤.\n"
        "–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏: –ü–Ω-–ü—Ç –∑ 9:00 –¥–æ 18:00.\n–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –¥–æ–≤—ñ–¥–æ–∫: +380123456789"
    )

# Callback –æ–±—Ä–æ–±–∫–∞
@dp.callback_query(F.callback_data.in_({"diagnostics", "screen_replacement", "battery_replacement", "charging_port_repair", "other_issue"}))
async def callback_service_info(call: types.CallbackQuery):
    descriptions = {
        "diagnostics": "üîç **–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞**\n\n–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ–∑–≤–æ–ª—è—î —Ç–æ—á–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –Ω–µ—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—ñ –≤–∞—à–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
        "screen_replacement": "üì± **–ó–∞–º—ñ–Ω–∞ –µ–∫—Ä–∞–Ω–∞**\n\n–ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –∑–∞–º—ñ–Ω—É –µ–∫—Ä–∞–Ω—ñ–≤ –¥–ª—è –±—ñ–ª—å—à–æ—Å—Ç—ñ –º–æ–¥–µ–ª–µ–π —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤.",
        "battery_replacement": "üîã **–ó–∞–º—ñ–Ω–∞ –±–∞—Ç–∞—Ä–µ—ó**\n\n–®–≤–∏–¥–∫–æ —Ä–æ–∑—Ä—è–¥–∂–∞—î—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω? –ú–∏ –∑–∞–º—ñ–Ω–∏–º–æ –±–∞—Ç–∞—Ä–µ—é –Ω–∞ –Ω–æ–≤—É.",
        "charging_port_repair": "üîå **–†–µ–º–æ–Ω—Ç —Ä–æ–∑'—î–º—É –∑–∞—Ä—è–¥–∫–∏**\n\n–ú–∏ –≤–∏–ø—Ä–∞–≤–∏–º–æ –∞–±–æ –∑–∞–º—ñ–Ω–∏–º–æ —Ä–æ–∑'—î–º –∑–∞—Ä—è–¥–∫–∏.",
        "other_issue": "üìû **–Ü–Ω—à–∞ –ø–æ–ª–æ–º–∫–∞**\n\n–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É, —ñ –º–∏ –¥–æ–ø–æ–º–æ–∂–µ–º–æ –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è."
    }
    description = descriptions[call.data]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è", callback_data=f"register_{call.data}")]
    ])
    await call.message.answer(description, reply_markup=keyboard)

# Callback –¥–ª—è –∑–∞–ø–∏—Å—É
@dp.callback_query(F.callback_data.startswith("register_"))
async def callback_register(call: types.CallbackQuery):
    await call.message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∑–∞–ø–∏—Å—É:\n- –í–∞—à–µ —ñ–º'—è\n- –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n- –ú–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω—É\n- –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
