from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from bot.keyboards.inline import catalog_buttons, product_details
from bot.keyboards.reply import main_menu, main_menu_reply
from bot.database import session, Product, Order  # –Ü–º–ø–æ—Ä—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —ñ –º–æ–¥–µ–ª—ñ
import stripe
from config import STRIPE_API_KEY, STRIPE_SUCCESS_URL, STRIPE_CANCEL_URL

stripe.api_key = STRIPE_API_KEY

router = Router()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∫–æ—à–∏–∫—ñ–≤
user_cart = {}

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤
products = [
    {"id": 1, "name": "–°–º–∞—Ä—Ç—Ñ–æ–Ω Samsung Galaxy S23", "price": "30,000 –≥—Ä–Ω"},
    {"id": 2, "name": "–ù–æ—É—Ç–±—É–∫ Apple MacBook Pro 14", "price": "80,000 –≥—Ä–Ω"},
    {"id": 3, "name": "–ù–∞–≤—É—à–Ω–∏–∫–∏ Sony WH-1000XM5", "price": "12,000 –≥—Ä–Ω"},
    {"id": 4, "name": "–¢–µ–ª–µ–≤—ñ–∑–æ—Ä LG OLED 55\" 4K", "price": "50,000 –≥—Ä–Ω"},
]

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏ —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
class OrderStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_address = State()
    waiting_for_delivery_type = State()
    waiting_for_payment = State()

@router.message(F.text == "/start")
async def main_menu(message: Message):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —É Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ.
    """
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –±–æ—Ç. –û—Å—å, —â–æ —è –≤–º—ñ—é:\n"
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/catalog - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏\n"
        "/info - –ü—Ä–æ –±–æ—Ç–∞",
        reply_markup=main_menu_reply())

# –í–∏–±—ñ—Ä —Ç–æ–≤–∞—Ä—É
@router.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ–∑ –∫–Ω–æ–ø–∫–æ—é "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä".
    """
    products = session.query(Product).all()  # –í–∏—Ç—è–≥—É—î–º–æ –æ–±'—î–∫—Ç–∏ Product —ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö

    if not products:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–æ–∂–µ–Ω —Ç–æ–≤–∞—Ä —ñ–∑ –∫–Ω–æ–ø–∫–æ—é "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä"
    for product in products:
        await message.answer(
            f"{product.name} - {product.price:.2f} –≥—Ä–Ω",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä üîç",
                        callback_data=f"view_product_{product.id}"
                    )]
                ]
            )
        )
@router.callback_query(F.data.startswith("view_product_"))
async def view_product(callback: CallbackQuery):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä —ñ–∑ –∫–Ω–æ–ø–∫–æ—é "–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫".
    """
    product_id = int(callback.data.split("_")[2])
    product = session.query(Product).filter(Product.id == product_id).first()

    if not product:
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return

    availability = "‚úÖ –Ñ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ" if product.in_stock else "‚ùå –ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"

    await callback.message.answer(
        f"–ù–∞–∑–≤–∞: {product.name}\n"
        f"–¶—ñ–Ω–∞: {product.price:.2f} –≥—Ä–Ω\n"
        f"–û–ø–∏—Å: {product.description}\n"
        f"–ù–∞—è–≤–Ω—ñ—Å—Ç—å: {availability}\n\n"
        "–©–æ–± –¥–æ–¥–∞—Ç–∏ —Ü–µ–π —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫ üõí",
                    callback_data=f"add_to_cart_{product.id}"
                )],
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É",
                    callback_data="open_catalog"
                )]
            ]
        )
    )
    await callback.answer()

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery):
    """
    –î–æ–¥–∞—î —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    product_id = int(callback.data.split("_")[3])
    product = session.query(Product).filter(Product.id == product_id).first()

    if not product:
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
        await callback.answer()
        return

    # –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä —É —Å–ª–æ–≤–Ω–∏–∫ –∫–æ—à–∏–∫–∞
    user_id = callback.from_user.id
    if user_id not in user_cart:
        user_cart[user_id] = []
    user_cart[user_id].append(product)

    await callback.message.answer(f"–¢–æ–≤–∞—Ä '{product.name}' –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –∫–æ—à–∏–∫–∞ üõí")
    await callback.answer()
def catalog_menu():
    """
    –ì–µ–Ω–µ—Ä—É—î Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é '–ö–∞—Ç–∞–ª–æ–≥'.
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

@router.message(F.text == "–ö–æ—à–∏–∫ üõí")
async def view_cart(message: Message):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ç–æ–≤–∞—Ä–∏ —É –∫–æ—à–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    user_id = message.from_user.id
    cart = user_cart.get(user_id, [])

    if not cart:
        await message.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π üõí")
        return

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏ "–í–∏–¥–∞–ª–∏—Ç–∏"
    for idx, product in enumerate(cart):
        await message.answer(
            f"{product.name} - {product.price:.2f} –≥—Ä–Ω",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="–í–∏–¥–∞–ª–∏—Ç–∏ ‚ùå", callback_data=f"remove_from_cart_{idx}"
                    )]
                ]
            )
        )

    total_price = sum(product.price for product in cart)

    # –ü—ñ–¥—Å—É–º–æ–∫ –∫–æ—à–∏–∫–∞
    await message.answer(
        f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price:.2f} –≥—Ä–Ω\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚úÖ", callback_data="checkout")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="open_catalog")]
            ]
        )
    )

@router.callback_query(F.data.startswith("remove_from_cart_"))
async def remove_from_cart(callback: CallbackQuery):
    """
    –í–∏–¥–∞–ª—è—î —Ç–æ–≤–∞—Ä —ñ–∑ –∫–æ—à–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    user_id = callback.from_user.id
    cart = user_cart.get(user_id, [])

    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    item_index = int(callback.data.split("_")[3])

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω–¥–µ–∫—Å—É
    if item_index < 0 or item_index >= len(cart):
        await callback.message.answer("–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ—à–∏–∫—É.")
        await callback.answer()
        return

    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–≤–∞—Ä
    removed_item = cart.pop(item_index)
    user_cart[user_id] = cart  # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ—à–∏–∫

    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    await callback.message.answer(f"–¢–æ–≤–∞—Ä '{removed_item.name}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞ üõí")

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ—à–∏–∫
    await view_cart(callback)
    await callback.answer()


@router.message(F.text == "/order")
async def order_command(message: Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /order.
    –í–∏–≤–æ–¥–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –∫–∞—Ç–∞–ª–æ–≥.
    """
    await message.answer(
        "–©–æ–± –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É:",
        reply_markup=catalog_menu()  # –î–æ–¥–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    )

@router.message(F.text == "–î–æ–ø–æ–º–æ–≥–∞")
async def show_help(message: Message):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –¥–æ–≤—ñ–¥–∫—É –ø—Ä–æ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞.
    """
    await message.answer(
        "‚ùì –î–æ–ø–æ–º–æ–≥–∞:\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç\n"
        "–ö–∞—Ç–∞–ª–æ–≥ - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤\n"
        "–ö–æ—à–∏–∫ - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏ —É –∫–æ—à–∏–∫—É\n"
        "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è - –î–µ—Ç–∞–ª—ñ –ø—Ä–æ –±–æ—Ç–∞\n"
        "–î–æ–ø–æ–º–æ–≥–∞ - –î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
    )

@router.message(F.text == "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
async def info_command(message: Message):
    await message.answer("–¶–µ –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –±—ñ–ª—å—à–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.")

@router.callback_query(F.data.startswith("order_"))
async def order_product(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    product = session.query(Product).filter(Product.id == product_id).first()

    if not product:
        await callback.message.answer("–¶–µ–π —Ç–æ–≤–∞—Ä –±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        await callback.answer()
        return

    # –î–æ–¥–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    new_order = Order(
        product_name=product.name,
        price=product.price,
        user_id=callback.from_user.id,
        user_name=callback.from_user.full_name
    )
    session.add(new_order)
    session.commit()

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await callback.message.answer(
        f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ:\n"
        f"–ù–∞–∑–≤–∞: {product.name}\n"
        f"–¶—ñ–Ω–∞: {product.price:.2f} –≥—Ä–Ω\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!"
    )
    await callback.answer()


@router.callback_query(F.data == "open_catalog")
async def open_catalog(callback: CallbackQuery):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä—ñ–≤.
    """
    await show_catalog(callback.message)  # –ü–µ—Ä–µ–¥–∞—î–º–æ Message –æ–±'—î–∫—Ç —É show_catalog
    await callback.answer()

@router.callback_query(F.data == "checkout")
async def checkout(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∑–∞–ø–∏—Ç—É—é—á–∏ —ñ–º'—è.
    """
    await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
    await state.set_state(OrderStates.waiting_for_name)
    await callback.answer()

@router.message(OrderStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∑–∞–ø–∏—Ç—É—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.
    """
    await state.update_data(name=message.text)

    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX:")
    await state.set_state(OrderStates.waiting_for_phone)

@router.message(OrderStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ –∑–∞–ø–∏—Ç—É—î –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏.
    """
    if not message.text.startswith("+") or not message.text[1:].isdigit():
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    await state.update_data(phone=message.text)

    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderStates.waiting_for_address)

@router.message(OrderStates.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–∞ –∑–∞–ø–∏—Ç—É—î —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏.
    """
    await state.update_data(address=message.text)

    # –ó–∞–ø–∏—Ç —Ç–∏–ø—É –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    delivery_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ï–∫—Å–ø—Ä–µ—Å")],
            [KeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=delivery_keyboard)
    await state.set_state(OrderStates.waiting_for_delivery_type)

@router.message(OrderStates.waiting_for_delivery_type)
async def process_delivery_type(message: Message, state: FSMContext):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏, –≥–µ–Ω–µ—Ä—É—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Stripe.
    """
    if message.text not in ["–ï–∫—Å–ø—Ä–µ—Å", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞"]:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–ï–∫—Å–ø—Ä–µ—Å' –∞–±–æ '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞'.")
        return

    await state.update_data(delivery_type=message.text)

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    user_data = await state.get_data()

    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
    total_price = sum(item.price for item in user_cart.get(message.from_user.id, []))  # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Stripe
    try:
        session = stripe.checkout.Session.create(
            payment_method_types=["card"],
            line_items=[
                {
                    "price_data": {
                        "currency": "usd",
                        "product_data": {
                            "name": f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è {user_data['name']}",
                        },
                        "unit_amount": int(total_price * 100),  # Stripe –ø—Ä–∞—Ü—é—î –∑ –∫–æ–ø—ñ–π–∫–∞–º–∏
                    },
                    "quantity": 1,
                }
            ],
            mode="payment",
            success_url="https://example.com/success",
            cancel_url="https://example.com/cancel",
        )

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É
        await message.answer(
            f"‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–∞–π–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n"
            f"–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {total_price:.2f} USD\n\n"
            f"!–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ –Ω–∞–ø–∏—à—ñ—Ç—å '–Ø –æ–ø–ª–∞—Ç–∏–≤' –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n"
            f"[–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç—É—Ç –¥–ª—è –æ–ø–ª–∞—Ç–∏]({session.url})",
            parse_mode="Markdown",
        )

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–∏
        await state.set_state(OrderStates.waiting_for_payment)

    except stripe.error.StripeError as e:
        await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        print(f"Stripe error: {e}")


@router.message(OrderStates.waiting_for_payment)
async def confirm_payment(message: Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à—É—î –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏.
    """
    if message.text.lower() != "—è –æ–ø–ª–∞—Ç–∏–≤":
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å '–Ø –æ–ø–ª–∞—Ç–∏–≤', —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    user_data = await state.get_data()
    user_id = message.from_user.id
    cart = user_cart.pop(user_id, [])

    if not cart:
        await message.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        await state.clear()
        return

    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
    total_price = sum(item.price for item in cart)

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –±–∞–∑—É –¥–∞–Ω–∏—Ö
    new_order = Order(
        user_id=user_id,
        name=user_data['name'],
        phone=user_data['phone'],
        address=user_data['address'],
        delivery_type=user_data['delivery_type'],
        total_price=total_price
    )
    session.add(new_order)
    session.commit()

    # –ü—ñ–¥—Å—É–º–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await message.answer(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!\n\n"
        f"**–Ü–º'—è:** {user_data['name']}\n"
        f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {user_data['phone']}\n"
        f"**–ê–¥—Ä–µ—Å–∞:** {user_data['address']}\n"
        f"**–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:** {user_data['delivery_type']}\n"
        f"**–°—É–º–∞:** {total_price:.2f} –≥—Ä–Ω\n\n"
        "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏.",
        reply_markup=main_menu_reply()
    )

    # –ó–∞–≤–µ—Ä—à—É—î–º–æ FSM
    await state.clear()
