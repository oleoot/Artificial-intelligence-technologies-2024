from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from config import ADMIN_IDS
from bot.handlers.user import OrderStates
from aiogram import Bot
from bot.handlers.user import products  # –Ü–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –∑ user.py
from bot.database import session, Product, Order  # –Ü–º–ø–æ—Ä—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —ñ –º–æ–¥–µ–ª—ñ


router = Router()
# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤
products = []

class AdminStates(StatesGroup):
    waiting_for_item_name = State()
    waiting_for_item_price = State()
    waiting_for_item_description = State()
    waiting_for_item_stock = State()

@router.message(F.text == "/add_item", F.from_user.id.in_(ADMIN_IDS))
async def start_adding_item(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")
    await state.set_state(AdminStates.waiting_for_item_name)

@router.message(AdminStates.waiting_for_item_name, F.from_user.id.in_(ADMIN_IDS))
async def add_item_name(message: Message, state: FSMContext):
    await state.update_data(item_name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É:")
    await state.set_state(AdminStates.waiting_for_item_price)

@router.message(AdminStates.waiting_for_item_price, F.from_user.id.in_(ADMIN_IDS))
async def add_item_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
    except ValueError:
        await message.answer("–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    await state.update_data(price=price)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")
    await state.set_state(AdminStates.waiting_for_item_description)

@router.message(AdminStates.waiting_for_item_description, F.from_user.id.in_(ADMIN_IDS))
async def add_item_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–ß–∏ —î —Ç–æ–≤–∞—Ä —É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ '–¢–∞–∫' –∞–±–æ '–ù—ñ'.")
    await state.set_state(AdminStates.waiting_for_item_stock)

@router.message(AdminStates.waiting_for_item_stock, F.from_user.id.in_(ADMIN_IDS))
async def add_item_stock(message: Message, state: FSMContext):
    in_stock = message.text.lower() in ["—Ç–∞–∫", "yes", "y"]
    data = await state.get_data()

    # –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä —É –±–∞–∑—É –¥–∞–Ω–∏—Ö
    new_product = Product(
        name=data['item_name'],
        price=data['price'],
        description=data['description'],
        in_stock=in_stock
    )
    session.add(new_product)
    session.commit()

    await message.answer(f"–¢–æ–≤–∞—Ä '{data['item_name']}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.")
    await state.clear()

@router.message(F.text == "/admin", F.from_user.id.in_(ADMIN_IDS))
async def admin_panel(message: Message):
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                         "/add_item - –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä\n"
                         "/remove_item - –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä\n"
                         "/orders - –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å")

@router.message(OrderStates.waiting_for_delivery_type, F.text == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")
async def confirm_order(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    product = data.get("selected_product")
    contact = data.get("contact")

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await message.answer(
        f"–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n"
        f"–¢–æ–≤–∞—Ä: {product['name']}\n"
        f"–¶—ñ–Ω–∞: {product['price']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä: {contact}\n"
        f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
    )

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    admin_message = (
        f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
        f"–¢–æ–≤–∞—Ä: {product['name']}\n"
        f"–¶—ñ–Ω–∞: {product['price']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∫–ª—ñ—î–Ω—Ç–∞: {contact}\n"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {message.from_user.full_name} (ID: {message.from_user.id})"
    )
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, admin_message)
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    # –í–∏—Ö—ñ–¥ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await message.answer(
        "–í–∞—Å –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=main_menu()
    )
    await state.clear()  # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω

@router.message(F.text == "/remove_item", F.from_user.id.in_(ADMIN_IDS))
async def start_remove_item(message: Message):
    """
    –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.
    """
    products = session.query(Product).all()

    if not products:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{product.name} ({product.price:.2f} –≥—Ä–Ω)", callback_data=f"delete_{product.id}")]
            for product in products
        ]
    )

    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=markup)

@router.callback_query(F.data.startswith("delete_"))
async def remove_item(callback: CallbackQuery):
    """
    –í–∏–¥–∞–ª—è—î —Ç–æ–≤–∞—Ä —ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    """
    product_id = int(callback.data.split("_")[1])

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä —ñ–∑ –±–∞–∑–∏
    product = session.query(Product).filter(Product.id == product_id).first()

    if not product:
        await callback.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–∏–π.")
        await callback.answer()
        return

    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–≤–∞—Ä —ñ–∑ –±–∞–∑–∏
    session.delete(product)
    session.commit()

    await callback.message.answer(f"–¢–æ–≤–∞—Ä '{product.name}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    await callback.answer()

@router.message(F.text == "/orders", F.from_user.id.in_(ADMIN_IDS))
async def view_orders(message: Message):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.
    """
    orders = session.query(Order).all()

    if not orders:
        await message.answer("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return

    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å
    order_list = [
        f"üÜî –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}\n"
        f"üë§ –Ü–º'—è: {order.name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
        f"üè† –ê–¥—Ä–µ—Å–∞: {order.address}\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {order.delivery_type}\n"
        f"üí∞ –°—É–º–∞: {order.total_price:.2f} –≥—Ä–Ω\n"
        f"üïí –î–∞—Ç–∞: {order.created_at.strftime('%Y-%m-%d %H:%M:%S')}"
        for order in orders
    ]

    await message.answer("\n\n".join(order_list))
